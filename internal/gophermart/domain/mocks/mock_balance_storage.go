// Code generated by MockGen. DO NOT EDIT.
// Source: internal/gophermart/domain/balance.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	storage "github.com/dnsoftware/gophermart2/internal/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockBalanceStorage is a mock of BalanceStorage interface.
type MockBalanceStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceStorageMockRecorder
}

// MockBalanceStorageMockRecorder is the mock recorder for MockBalanceStorage.
type MockBalanceStorageMockRecorder struct {
	mock *MockBalanceStorage
}

// NewMockBalanceStorage creates a new mock instance.
func NewMockBalanceStorage(ctrl *gomock.Controller) *MockBalanceStorage {
	mock := &MockBalanceStorage{ctrl: ctrl}
	mock.recorder = &MockBalanceStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceStorage) EXPECT() *MockBalanceStorageMockRecorder {
	return m.recorder
}

// GetUserBalance mocks base method.
func (m *MockBalanceStorage) GetUserBalance(ctx context.Context, userID int64) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, userID)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockBalanceStorageMockRecorder) GetUserBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockBalanceStorage)(nil).GetUserBalance), ctx, userID)
}

// GetUserWithdrawList mocks base method.
func (m *MockBalanceStorage) GetUserWithdrawList(ctx context.Context, userID int64) ([]storage.WithdrawRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithdrawList", ctx, userID)
	ret0, _ := ret[0].([]storage.WithdrawRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithdrawList indicates an expected call of GetUserWithdrawList.
func (mr *MockBalanceStorageMockRecorder) GetUserWithdrawList(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithdrawList", reflect.TypeOf((*MockBalanceStorage)(nil).GetUserWithdrawList), ctx, userID)
}

// GetUserWithdrawn mocks base method.
func (m *MockBalanceStorage) GetUserWithdrawn(ctx context.Context, userID int64) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithdrawn", ctx, userID)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithdrawn indicates an expected call of GetUserWithdrawn.
func (mr *MockBalanceStorageMockRecorder) GetUserWithdrawn(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithdrawn", reflect.TypeOf((*MockBalanceStorage)(nil).GetUserWithdrawn), ctx, userID)
}

// SaveTransaction mocks base method.
func (m *MockBalanceStorage) SaveTransaction(ctx context.Context, orderNumber int64, amount float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTransaction", ctx, orderNumber, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTransaction indicates an expected call of SaveTransaction.
func (mr *MockBalanceStorageMockRecorder) SaveTransaction(ctx, orderNumber, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTransaction", reflect.TypeOf((*MockBalanceStorage)(nil).SaveTransaction), ctx, orderNumber, amount)
}

// WithdrawTransaction mocks base method.
func (m *MockBalanceStorage) WithdrawTransaction(ctx context.Context, userID, orderNumber int64, amount float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawTransaction", ctx, userID, orderNumber, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawTransaction indicates an expected call of WithdrawTransaction.
func (mr *MockBalanceStorageMockRecorder) WithdrawTransaction(ctx, userID, orderNumber, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawTransaction", reflect.TypeOf((*MockBalanceStorage)(nil).WithdrawTransaction), ctx, userID, orderNumber, amount)
}
