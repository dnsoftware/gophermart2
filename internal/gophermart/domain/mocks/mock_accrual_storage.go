// Code generated by MockGen. DO NOT EDIT.
// Source: internal/gophermart/domain/accrual.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	storage "github.com/dnsoftware/gophermart2/internal/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockAccrualStorage is a mock of AccrualStorage interface.
type MockAccrualStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAccrualStorageMockRecorder
}

// MockAccrualStorageMockRecorder is the mock recorder for MockAccrualStorage.
type MockAccrualStorageMockRecorder struct {
	mock *MockAccrualStorage
}

// NewMockAccrualStorage creates a new mock instance.
func NewMockAccrualStorage(ctrl *gomock.Controller) *MockAccrualStorage {
	mock := &MockAccrualStorage{ctrl: ctrl}
	mock.recorder = &MockAccrualStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccrualStorage) EXPECT() *MockAccrualStorageMockRecorder {
	return m.recorder
}

// GetOrder mocks base method.
func (m *MockAccrualStorage) GetOrder(orderNum int64) (*storage.AccrualRow, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", orderNum)
	ret0, _ := ret[0].(*storage.AccrualRow)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockAccrualStorageMockRecorder) GetOrder(orderNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockAccrualStorage)(nil).GetOrder), orderNum)
}

// MockUnchecked is a mock of Unchecked interface.
type MockUnchecked struct {
	ctrl     *gomock.Controller
	recorder *MockUncheckedMockRecorder
}

// MockUncheckedMockRecorder is the mock recorder for MockUnchecked.
type MockUncheckedMockRecorder struct {
	mock *MockUnchecked
}

// NewMockUnchecked creates a new mock instance.
func NewMockUnchecked(ctrl *gomock.Controller) *MockUnchecked {
	mock := &MockUnchecked{ctrl: ctrl}
	mock.recorder = &MockUncheckedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnchecked) EXPECT() *MockUncheckedMockRecorder {
	return m.recorder
}

// Pop mocks base method.
func (m *MockUnchecked) Pop(ctx context.Context) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pop", ctx)
	ret0, _ := ret[0].(int64)
	return ret0
}

// Pop indicates an expected call of Pop.
func (mr *MockUncheckedMockRecorder) Pop(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pop", reflect.TypeOf((*MockUnchecked)(nil).Pop), ctx)
}

// MockChecked is a mock of Checked interface.
type MockChecked struct {
	ctrl     *gomock.Controller
	recorder *MockCheckedMockRecorder
}

// MockCheckedMockRecorder is the mock recorder for MockChecked.
type MockCheckedMockRecorder struct {
	mock *MockChecked
}

// NewMockChecked creates a new mock instance.
func NewMockChecked(ctrl *gomock.Controller) *MockChecked {
	mock := &MockChecked{ctrl: ctrl}
	mock.recorder = &MockCheckedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChecked) EXPECT() *MockCheckedMockRecorder {
	return m.recorder
}

// Push mocks base method.
func (m *MockChecked) Push(order int64, status string, accrual float32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Push", order, status, accrual)
}

// Push indicates an expected call of Push.
func (mr *MockCheckedMockRecorder) Push(order, status, accrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockChecked)(nil).Push), order, status, accrual)
}
