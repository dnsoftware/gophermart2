// Code generated by MockGen. DO NOT EDIT.
// Source: internal/gophermart/domain/user.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	storage "github.com/dnsoftware/gophermart2/internal/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockUserStorage is a mock of UserStorage interface.
type MockUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUserStorageMockRecorder
}

// MockUserStorageMockRecorder is the mock recorder for MockUserStorage.
type MockUserStorageMockRecorder struct {
	mock *MockUserStorage
}

// NewMockUserStorage creates a new mock instance.
func NewMockUserStorage(ctrl *gomock.Controller) *MockUserStorage {
	mock := &MockUserStorage{ctrl: ctrl}
	mock.recorder = &MockUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStorage) EXPECT() *MockUserStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserStorage) Create(ctx context.Context, login, password string) (int64, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, login, password)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockUserStorageMockRecorder) Create(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserStorage)(nil).Create), ctx, login, password)
}

// FindByID mocks base method.
func (m *MockUserStorage) FindByID(ctx context.Context, id int64) (storage.UserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(storage.UserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockUserStorageMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserStorage)(nil).FindByID), ctx, id)
}

// FindByLoginPassword mocks base method.
func (m *MockUserStorage) FindByLoginPassword(ctx context.Context, login, password string) (int64, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByLoginPassword", ctx, login, password)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByLoginPassword indicates an expected call of FindByLoginPassword.
func (mr *MockUserStorageMockRecorder) FindByLoginPassword(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByLoginPassword", reflect.TypeOf((*MockUserStorage)(nil).FindByLoginPassword), ctx, login, password)
}
