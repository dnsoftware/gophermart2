// Code generated by MockGen. DO NOT EDIT.
// Source: internal/gophermart/domain/order.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	storage "github.com/dnsoftware/gophermart2/internal/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderStorage is a mock of OrderStorage interface.
type MockOrderStorage struct {
	ctrl     *gomock.Controller
	recorder *MockOrderStorageMockRecorder
}

// MockOrderStorageMockRecorder is the mock recorder for MockOrderStorage.
type MockOrderStorageMockRecorder struct {
	mock *MockOrderStorage
}

// NewMockOrderStorage creates a new mock instance.
func NewMockOrderStorage(ctrl *gomock.Controller) *MockOrderStorage {
	mock := &MockOrderStorage{ctrl: ctrl}
	mock.recorder = &MockOrderStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderStorage) EXPECT() *MockOrderStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderStorage) Create(ctx context.Context, userID, number int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userID, number)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOrderStorageMockRecorder) Create(ctx, userID, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderStorage)(nil).Create), ctx, userID, number)
}

// GetOrderByNumber mocks base method.
func (m *MockOrderStorage) GetOrderByNumber(ctx context.Context, orderNumber int64) (storage.OrderRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByNumber", ctx, orderNumber)
	ret0, _ := ret[0].(storage.OrderRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByNumber indicates an expected call of GetOrderByNumber.
func (mr *MockOrderStorageMockRecorder) GetOrderByNumber(ctx, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByNumber", reflect.TypeOf((*MockOrderStorage)(nil).GetOrderByNumber), ctx, orderNumber)
}

// GetUnchecked mocks base method.
func (m *MockOrderStorage) GetUnchecked(ctx context.Context) ([]storage.OrderRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnchecked", ctx)
	ret0, _ := ret[0].([]storage.OrderRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnchecked indicates an expected call of GetUnchecked.
func (mr *MockOrderStorageMockRecorder) GetUnchecked(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnchecked", reflect.TypeOf((*MockOrderStorage)(nil).GetUnchecked), ctx)
}

// List mocks base method.
func (m *MockOrderStorage) List(ctx context.Context, userID int64) ([]storage.OrderRow, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, userID)
	ret0, _ := ret[0].([]storage.OrderRow)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockOrderStorageMockRecorder) List(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOrderStorage)(nil).List), ctx, userID)
}

// UpdateStatus mocks base method.
func (m *MockOrderStorage) UpdateStatus(ctx context.Context, orderNumber int64, orderStatus string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, orderNumber, orderStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockOrderStorageMockRecorder) UpdateStatus(ctx, orderNumber, orderStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockOrderStorage)(nil).UpdateStatus), ctx, orderNumber, orderStatus)
}

// MockUncheckedOrders is a mock of UncheckedOrders interface.
type MockUncheckedOrders struct {
	ctrl     *gomock.Controller
	recorder *MockUncheckedOrdersMockRecorder
}

// MockUncheckedOrdersMockRecorder is the mock recorder for MockUncheckedOrders.
type MockUncheckedOrdersMockRecorder struct {
	mock *MockUncheckedOrders
}

// NewMockUncheckedOrders creates a new mock instance.
func NewMockUncheckedOrders(ctrl *gomock.Controller) *MockUncheckedOrders {
	mock := &MockUncheckedOrders{ctrl: ctrl}
	mock.recorder = &MockUncheckedOrdersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUncheckedOrders) EXPECT() *MockUncheckedOrdersMockRecorder {
	return m.recorder
}

// Push mocks base method.
func (m *MockUncheckedOrders) Push(number int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Push", number)
}

// Push indicates an expected call of Push.
func (mr *MockUncheckedOrdersMockRecorder) Push(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockUncheckedOrders)(nil).Push), number)
}

// MockCheckedOrders is a mock of CheckedOrders interface.
type MockCheckedOrders struct {
	ctrl     *gomock.Controller
	recorder *MockCheckedOrdersMockRecorder
}

// MockCheckedOrdersMockRecorder is the mock recorder for MockCheckedOrders.
type MockCheckedOrdersMockRecorder struct {
	mock *MockCheckedOrders
}

// NewMockCheckedOrders creates a new mock instance.
func NewMockCheckedOrders(ctrl *gomock.Controller) *MockCheckedOrders {
	mock := &MockCheckedOrders{ctrl: ctrl}
	mock.recorder = &MockCheckedOrdersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckedOrders) EXPECT() *MockCheckedOrdersMockRecorder {
	return m.recorder
}

// Pop mocks base method.
func (m *MockCheckedOrders) Pop(ctx context.Context) (int64, string, float32) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pop", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(float32)
	return ret0, ret1, ret2
}

// Pop indicates an expected call of Pop.
func (mr *MockCheckedOrdersMockRecorder) Pop(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pop", reflect.TypeOf((*MockCheckedOrders)(nil).Pop), ctx)
}

// MockBalanceAdd is a mock of BalanceAdd interface.
type MockBalanceAdd struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceAddMockRecorder
}

// MockBalanceAddMockRecorder is the mock recorder for MockBalanceAdd.
type MockBalanceAddMockRecorder struct {
	mock *MockBalanceAdd
}

// NewMockBalanceAdd creates a new mock instance.
func NewMockBalanceAdd(ctrl *gomock.Controller) *MockBalanceAdd {
	mock := &MockBalanceAdd{ctrl: ctrl}
	mock.recorder = &MockBalanceAddMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceAdd) EXPECT() *MockBalanceAddMockRecorder {
	return m.recorder
}

// AddTransaction mocks base method.
func (m *MockBalanceAdd) AddTransaction(ctx context.Context, orderNumber int64, amount float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransaction", ctx, orderNumber, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTransaction indicates an expected call of AddTransaction.
func (mr *MockBalanceAddMockRecorder) AddTransaction(ctx, orderNumber, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransaction", reflect.TypeOf((*MockBalanceAdd)(nil).AddTransaction), ctx, orderNumber, amount)
}
